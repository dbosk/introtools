Now we should grade the LaTeX assignment.

We will use the [[canvas]] command to report the grades.
This must be installed from
\begin{center}
  \texttt{https://github.com/dbosk/canvasy}.
\end{center}

We will use the [[repobee]] command to clone the repos containing the LaTeX 
reports.
This must be installed from
\begin{center}
  \texttt{https://repobee.org}.
\end{center}

This script will be a make include file to be able to keep state more easily.
The main target is [[grade]].
<<grade.sh>>=
# This file is generated from grade.sh.nw
<<variables>>
<<functions>>

<<set up students to grade>>
<<clone repos>>
<<grade remaining students>>
<<clean up>>
@


\section{Setup}

We will keep students who must be graded in [[students-to-grade.tsv]].
Once we've reported them to Canvas, we can remove them from that list.
This list will contain their Canvas ID (first column) and their KTH username 
(second column).
We add [[students-to-grade.tsv]] as a prerequisite to [[grade]], then it will 
be created when necessary.
<<set up students to grade>>=
[ -e ${REMAINING_STUDENTS} ] || \
  canvas users -c ${COURSE_CODE} -s | cut -f 1,2 > ${REMAINING_STUDENTS}
@ We set the variables in the [[<<variables>>]] block.
<<variables>>=
COURSE_CODE=DD1301HT201
REMAINING_STUDENTS=students-to-grade.tsv
@

The LaTeX reports that we should grade are found in repos on KTH GitHub, in the 
datintro20 organization:
\begin{center}
  \texttt{https://gits-15.sys.kth.se/datintro20}.
\end{center}
We'll use [[repobee]] to clone those repos.
<<clone repos>>=
[ -d repos ] || \
  clone_repos
@
<<functions>>=
function clone_repos() {
  mkdir -p repos
  cut -f 2 ${REMAINING_STUDENTS} | \
    sed "s/@kth.se//" > repos/students-to-grade.tsv
  cd repos && \
    repobee repos clone \
      --sf students-to-grade.tsv -o ${GH_ORG} --discover-repos
}
@
<<variables>>=
GH_ORG=datintro20
@

We add cleaning as part of the [[distclean]] target.
<<clean up>>=
#rm -f -R repos
@


\section{Grading}

To grade, we iterate through the remaining students.
We check if the student has solved the assignment, if not we continue to the 
next.
Otherwise we grade the student and remove it from the list.
<<grade remaining students>>=
for s in $(cat students-to-grade.tsv | cut -f 2 | sed "s/@kth.se//");
do
  <<check the repo, continue if bad>>
  canvas grade -c "${COURSE_CODE}" -a "${ASSIGNMENT}" \
    -u $(grep $s students-to-grade.tsv | cut -f 1) -g 1
  sed -i "/$s/d" students-to-grade.tsv
done
@ We must set the [[ASSIGNMENT]] variable.
We will set it to a regular expression matching both terminal assignments.
<<variables>>=
ASSIGNMENT="(Git|LaTeX)"
@

We must check the repo for the required parts in the LaTeX report.
The requirements specifies
\begin{itemize}
\item a title,
\item a table of contents,
\item a figure,
\item a citations with a reference,
\item a listing containing the output of the history command.
\end{itemize}
We will search for a [[.tex]] file and simply grep(1) that file for the 
requirements.
<<check the repo, continue if bad>>=
[ -d repos/$s ] || continue
find repos/$s -type f -name \*.tex > texfiles-$s
pass=0
[ $(wc -l texfiles-$s | cut -f 1 -d " ") -gt 0 ] || \
  echo $s has no tex files && continue
check_student $s texfiles-$s "documentclass" || pass=1
check_student $s texfiles-$s "\\\\title" || pass=1
check_student $s texfiles-$s "\\\\maketitle" || pass=1
check_student $s texfiles-$s "\\\\tableofcontents" || pass=1
check_student $s texfiles-$s "\\\\begin{(.*figure|table)}" || pass=1
check_student $s texfiles-$s "\\\[a-z\]*cite" || pass=1
check_student $s texfiles-$s "\\\\.*lst(input)?listing" || pass=1
rm -f texfiles-$s
find repos/$s -type f > allfiles-$s
check_student $s allfiles-$s "history" || pass=1
rm -f allfiles-$s
if [ $pass = 1 ]; then
  continue
fi
@

The [[check_student]] function will grep(1) the files for the provided regex.
It will print and return false if the test failed.
<<functions>>=
function check_student() {
  cat "$2" | xargs -d "\n" egrep "$3" > /dev/null
  if [ $? = 0 ]; then
    true
  else
    echo "$1 failed $3"
    false
  fi
}
@
