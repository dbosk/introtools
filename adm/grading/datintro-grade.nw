\section{Overview}

We want to build a Docker image to run all the necessary grading in the course.
We use RepoBee to work with the students' repos, so we can base our work on 
that image.
Then we install the grading scripts and run them all by default.
<<Dockerfile>>=
FROM repobee/repobee

USER root
WORKDIR grader

<<set up SSH in container>>
<<set up canvaslms in container>>
<<set up grade scripts in container>>
@

Next is building the Docker image.
<<datintro-grade.mk>>=
TARGETS=  grade-all.sh
TARGETS+= grade-ssh.sh

.PHONY: all
all: datintro-grade

.PHONY: datintro-grade
datintro-grade: Dockerfile
	docker build -t $@ .

Dockerfile: datintro-grade.nw
	${NOTANGLE}

<<generate SSH keys>>
<<build the grading scripts>>

.PHONY: clean clean-docker
clean: clean-docker
clean-docker:
	${RM} Dockerfile

.PHONY: distclean distclean-docker
distclean: distclean-docker
distclean-docker:
	-docker image rm datintro-grade

<<clean targets>>
@

\section{Set up SSH}

We need to have SSH inside the container.
<<set up SSH in container>>=
RUN apk update && apk add openssh
COPY config id_rsa id_rsa.pub /root/.ssh/
@

To do this we need the [[Makefile]] to generate the SSH keys.
When they are generated, we also configure student-shell to accept them.
<<generate SSH keys>>=
id_rsa id_rsa.pub:
	ssh-keygen -f id_rsa -N ""
	ssh-copy-id -i id_rsa.pub student-shell.sys.kth.se

config: ${HOME}/.ssh/config
	${CP} $^ $@

datintro-grade: id_rsa id_rsa.pub config
@

We don't want to clean these keys.

\section{Set up Canvas}

We need the [[canvaslms]] command inside the container.
So we install it using [[pip]].
Now, since it depends on the [[cryptography]] package, we need to install the 
dependencies\footnote{%
  See \texttt{https://stackoverflow.com/a/53562393/1305099}.
}
<<set up canvaslms in container>>=
RUN apk add --no-cache build-base rust cargo \
  libffi-dev libressl-dev musl-dev libffi-dev && \
  python3 -m pip install --no-cache-dir canvaslms && \
  apk del build-base rust cargo \
    libffi-dev libressl-dev musl-dev libffi-dev
@


\section{All grading scripts}

We have a separate grading script for each assignment.
When we run the container we'd like all those scripts to run, so we create the 
[[grade-all.sh]] script that runs them all.
This script will also set up the required SSH agent.
<<grade-all.sh>>=
#!/bin/bash

eval $(ssh-agent -s)
ssh-add

./grade-ssh.sh &

wait
@

Now, we must copy all those scripts into the container and set the executable 
bit.
These scripts also need the standard commands, which are not included in 
alpine.
Then we make sure to execute [[grade-all.sh]] by default when the container is 
run.
<<set up grade scripts in container>>=
COPY grade-all.sh grade-ssh.sh ./
RUN chmod +x grade-all.sh grade-ssh.sh

RUN apk update && apk add util-linux coreutils findutils grep binutils acct

CMD ["/bin/bash", "grade-all.sh"]
@

To build the container we need [[make]] to first build local copies of all 
scripts.
<<build the grading scripts>>=
grade-all.sh: datintro-grade.nw
	${NOTANGLE.sh}

grade-ssh.sh: ../../modules/ssh/grading/grade.sh
	${CP} $^ $@

../%:
	${MAKE} -C $(dir $@) $(notdir $@)

datintro-grade: grade-all.sh grade-ssh.sh
@

Finally, we add some cleaning.
<<clean targets>>=
.PHONY: clean-scripts
clean: clean-scripts
clean-scripts:
	${RM} grade-all.sh
	${RM} grade-ssh.sh
@

