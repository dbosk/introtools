\section{Usage}

We need to set use the following setup for the Docker container to work.
We need the following environment variables:
\begin{itemize}
\item [[KRB_USER]] and [[KRB_PASS]] containing the Kerberos username (including 
@realm) and password for the user to access the SSH servers.
\item [[CANVAS_SERVER]] and [[CANVAS_TOKEN]] to authenticate the [[canvaslms]] 
command.
See [[canvaslms login -h]].
%\item [[LADOK_USER]] and [[LADOK_PASS]] containing the LADOK username and 
%password to use.
%See [[ladok login -h]].
\end{itemize}
Then we can run this image like this:
\begin{verbatim}
docker run -e KRB_USER -e KRB_PASS \
  -e CANVAS_SERVER -e CANVAS_TOKEN \
    datintro-grade:latest
\end{verbatim}


\section{Overview}

We want to build a Docker image to run all the necessary grading in the course.
We use RepoBee to work with the students' repos, so we can base our work on 
that image.
Then we install the grading scripts and run them all by default.
<<Dockerfile>>=
FROM repobee/repobee

USER root
WORKDIR grader

<<set up canvaslms in container>>
<<set up grading scripts in container>>
@

Next is building the Docker image.
We use the phony target [[datintro-grade]] for this.
<<datintro-grade.mk>>=
.PHONY: all
all: datintro-grade

.PHONY: datintro-grade
datintro-grade: Dockerfile
	docker build -t $@ .

Dockerfile: datintro-grade.nw
	${NOTANGLE}

.PHONY: clean clean-docker
clean: clean-docker
clean-docker:
	${RM} Dockerfile

.PHONY: distclean distclean-docker
distclean: distclean-docker
distclean-docker:
	-docker image rm -f datintro-grade

<<build the grading scripts>>
<<clean targets>>
@


\section{Set up \texttt{canvaslms}}

We need the [[canvaslms]] command inside the container since the scripts rely 
heavily on this.
So we install it using [[pip]].
Now, since it depends on the [[cryptography]] package, we need to install the 
dependencies\footnote{%
  See \texttt{https://stackoverflow.com/a/53562393/1305099}.
}
<<set up canvaslms in container>>=
RUN apk add --no-cache build-base rust cargo \
  libffi-dev libressl-dev musl-dev && \
  python3 -m pip install --no-cache-dir canvaslms && \
  apk del build-base rust cargo \
    libffi-dev libressl-dev musl-dev
@


\section{All grading scripts}

We have a separate grading script for each assignment.
When we run the container we'd like all those scripts to run, so we create the 
[[grade-all.sh]] script that runs them all.

This script will also set up the prerequisites for the individual grading 
scripts.
For starters, all scripts requires SSH to be set up with an agent to 
authenticate using public keys.
<<grade-all.sh>>=
#!/bin/bash

<<initialize SSH authentication for run>>

./grade-ssh.sh
./grade-terminal.sh
./grade-git.sh
./grade-latex.sh
@

Now, we must copy all those scripts into the container and set the executable 
bit.
These scripts also need the standard commands, which are not included in alpine 
(the base Docker image for RepoBee).
Then we make sure to execute [[grade-all.sh]] by default when the container is 
run.
<<set up grading scripts in container>>=
<<set up SSH in container>>

COPY grade-all.sh grade-ssh.sh grade-terminal.sh grade-git.sh grade-latex.sh ./
RUN chmod +x grade-all.sh grade-ssh.sh grade-terminal.sh \
  grade-git.sh grade-latex.sh

RUN apk update && apk add util-linux coreutils findutils grep binutils acct

CMD ["/bin/bash", "grade-all.sh"]
@

To build the container we need [[make]] to first build local copies of all 
scripts.
<<build the grading scripts>>=
grade-all.sh: datintro-grade.nw
	${NOTANGLE.sh}

grade-ssh.sh: ../../modules/ssh/grading/grade.sh
grade-terminal.sh: ../../modules/terminal/grading/grade.sh
grade-git.sh: ../../modules/git/grading/grade.sh
grade-latex.sh: ../../modules/latex/grading/grade.sh

grade-ssh.sh grade-terminal.sh grade-git.sh grade-latex.sh:
	${CP} $^ $@

../%:
	${MAKE} -C $(dir $@) $(notdir $@)

datintro-grade: grade-all.sh
datintro-grade: grade-ssh.sh grade-terminal.sh grade-git.sh grade-latex.sh
@

Finally, we add some cleaning.
<<clean targets>>=
.PHONY: clean-scripts
clean: clean-scripts
clean-scripts:
	${RM} grade-all.sh
	${RM} grade-ssh.sh grade-terminal.sh grade-git.sh grade-latex.sh

.PHONY: distclean-scripts
distclean: distclean-scripts
distclean-scripts:
	${MAKE} -C ../../modules/ssh/grading clean distclean
	${MAKE} -C ../../modules/terminal/grading clean distclean
	${MAKE} -C ../../modules/git/grading clean distclean
	${MAKE} -C ../../modules/latex/grading clean distclean
@


\section{Set up SSH}

We need to have SSH inside the container.
Since we want to interact with KTH systems, we also need Kerberos.
Then we want to have server specific configuration (the [[config]] file).
<<set up SSH in container>>=
RUN apk update && apk add openssh heimdal
COPY config /root/.ssh/
@

To do this we need the [[Makefile]] to build the [[config]] file.
<<generate SSH keys>>=
config: ${HOME}/.ssh/config
	${CP} $^ $@

datintro-grade: config
@

To set up the Kerberos authentication, we simply take the credentials from the 
environment.
<<initialize SSH authentication for run>>=
krb_pass_file=$(mktemp)

echo $KRB_PASS > $krb_pass_file
kinit -f --password-file=$krb_pass_file $KRB_USER

rm $krb_pass_file
@
