We want to grade the \emph{Guide to accessing the terminal} assignment, that 
is, the students should sign in over SSH.

The end goal of the guide.md assignment is that the students log into the 
[[student-shell]] system over SSH. We can run a shell script 
which queries the users who've signed in and simply tick our students off.

We will use the [[canvaslms]] command to report the grades. This must be installed 
from
\begin{center}
  \texttt{https://github.com/dbosk/canvaslms}.
\end{center}

We will do this as a shell script.
<<grade.sh>>=
#!/bin/bash
# This file is generated from grade.sh.nw

<<configuration variables>>

source common.sh

<<get last(1) output from student-shell>>
<<grade remaining students>>
@

\section{Settings}

We need a few variables as settings.
We must set the course code, in the [[COURSE_CODE]] variable.
This is a space-separated list of regular expressions.
We expect the course code to be set by the environment.

We must also set the [[ASSIGNMENT]] variable. This is a regular expression.
<<configuration variables>>=
ASSIGNMENT="(Guide to accessing the terminal)"
@


\section{Get log in data}

We'll use a similar construction for the logs of who has logged into 
student-shell.
We can simply SSH into the student-shell servers and get the output from 
last(1) to see who of our students have logged in.
However, we'll need to output the last(1) output from all existing wtmp 
files.
This is useful when we just passed the log rotation, so we don't miss any 
students.
We do this for each server, merging the output.
Since some students are hired as amanuensis in other courses already, they 
don't have access to student-shell, but staff-shell, we should check that one 
too.
The output will be a list of unique usernames only.
<<get last(1) output from student-shell>>=
students_that_signed_in() {
  for shell in student-shell-1 student-shell-2 student-shell-3 staff-shell;
  do
    ssh $shell.sys.kth.se \
      'for f in /var/log/wtmp*; do last -f $f; done' 2>/dev/null \
        || exit 1
  done | cut -f 1 -d " " | sort | uniq
}
@


\section{Grading}

Now we provide a function [[grade_students]] which takes the assignment name as 
the first argument (it's a regex passed to [[canvaslms]]). The remaining 
arguments constitutes a list of courses.

To grade, we iterate through the remaining students, given by 
[[students_to_grade]].
We check if the student has logged in (is in the list provided by 
[[students_that_signed_in]]), if not we continue to the next.
Otherwise we grade the student.
<<grade remaining students>>=
grade_students() {
  local signed_in=$(mktemp)
  students_that_signed_in > ${signed_in}

  local assignment="$1"
  shift

  for course in $*; do
    students=$(mktemp)
    students_to_grade "${course}" "${assignment}" > ${students}

    for s in $(cat ${students}); do
      grep "^$s\$" ${signed_in} > /dev/null || continue

      echo "$s (ssh)"

      canvaslms grade -c "${course}" -a "${assignment}" \
        -u "$s@kth.se" -g P &

      sleep 0.2
    done

    rm -Rf ${students}
  done

  rm ${signed_in}

  wait
}

grade_students "${ASSIGNMENT}" ${COURSE_CODE}
@
