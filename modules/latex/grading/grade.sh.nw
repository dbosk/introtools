We want to grade the \emph{Writing a report in LaTeX} assignment.
The students should add a \LaTeX{} report to their designated repo.
In short, the instructions is: Write a short document (article, using the 
article document class) in LaTeX with the following requirements: it must 
contain a title, a table of contents, a figure, a citation with a reference, a 
listing (using the listings package) that contains your command line history 
(the output of the history command).

We will use the [[canvaslms]] command to report the grades. This must be installed 
from
\begin{center}
  \texttt{https://github.com/dbosk/canvaslms}.
\end{center}

We will do this as a shell script.
<<grade.sh>>=
#!/bin/bash
# This file is generated from grade.sh.nw
<<configuration variables>>
<<common functions>>
<<generate grade and feedback>>
<<grade students>>
@

\section{Settings}

We need a few variables as settings.
We must set the course code (Canvas) and the organization (GitHub).
We set them in one string, colon separated.
<<configuration variables>>=
COURSE_CODE="DD1301HT20:datintro20"
COURSE_CODE="${COURSE_CODE} DD1301HT21:datintro21"
COURSE_CODE="${COURSE_CODE} DD1337HT21:dd1337-ht21-intro"
@
We must set the [[ASSIGNMENT]] variable. This is a regular expression.
<<configuration variables>>=
ASSIGNMENT="(Writing a report in LaTeX)"
@


\section{Common functions}

We will use the following functions from the [[common.sh]] file as a building 
block:
\begin{itemize}
\item [[students_to_grade]]
\item [[students_with_grading_time]]
\item [[clone_repos]]
\item [[students_to_actually_grade]]
\end{itemize}
<<common functions>>=
source common.sh
@


\section{Feedback and checking their repo}

We provide a function [[generate_feedback]].
It takes the path to a repo.
Its output is the feedback for the student.
If the feedback is zero, the student passes.

We must check the repo for the required parts in the LaTeX report.
The requirements specifies
\begin{itemize}
\item a title,
\item a table of contents,
\item a figure,
\item a citations with a reference,
\item a listing containing the output of the history command.
\end{itemize}
We will search for a [[.tex]] file and simply grep(1) that file for the 
requirements.
Then we look through all files for the [[history]] command.
<<generate grade and feedback>>=
generate_feedback() {
  local texfiles=$(mktemp)

  find "$1" -type f -name \*.tex > $texfiles

  if ! [ $(wc -l $texfiles | cut -f 1 -d " ") -gt 0 ]; then
    echo "No LaTeX files found. Make sure that you commit the source file."
    echo "We don't care about the PDF, with the source files we can build"
    echo "that one by ourselves."
    echo
  else
    if ! check_student $s $texfiles "documentclass"; then
      echo "No document class found:"
      echo "See the first video lecture (Video: Intro to LaTeX) from"
      echo "https://daniel.bosk.se/introtools/modules/latex/latex"
      echo "and read Lesson 5 from LearnLaTeX"
      echo "https://www.learnlatex.org/en/lesson-05"
      echo
    fi
    if ! check_student $s $texfiles "\\\\title"; then
      echo "No title found:"
      echo "See the first video lecture (Video: Intro to LaTeX) from"
      echo "https://daniel.bosk.se/introtools/modules/latex/latex"
      echo
    fi
    if ! check_student $s $texfiles "\\\\maketitle"; then
      echo "No title page generated:"
      echo "See the first video lecture (Video: Intro to LaTeX) from"
      echo "https://daniel.bosk.se/introtools/modules/latex/latex"
      echo
    fi
    if ! check_student $s $texfiles "\\\\tableofcontents"; then
      echo "No table of contents found:"
      echo "See the first video lecture (Video: Intro to LaTeX) from"
      echo "https://daniel.bosk.se/introtools/modules/latex/latex"
      echo
    fi
    if ! check_student $s $texfiles "\\\\begin{(.*figure|table)}"; then
      echo "No figure found:"
      echo "Hint: an image is not a figure, but a figure can contain an image."
      echo "See the fourth video lecture (Video: Figures and Tables) from"
      echo "https://daniel.bosk.se/introtools/modules/latex/latex"
      echo "and read Lesson 7 from LearnLaTeX"
      echo "https://www.learnlatex.org/en/lesson-07"
      echo "particularly about floats."
      echo
    fi
    if ! check_student $s $texfiles "\\\[a-z\]*cite"; then
      echo "No citation found:"
      echo "See the second video lecture (Video: References/Bibliography) from"
      echo "https://daniel.bosk.se/introtools/modules/latex/latex"
      echo "and read Lesson 12 from LearnLaTeX"
      echo "https://www.learnlatex.org/en/lesson-12"
      echo
    fi
    if ! check_student $s $texfiles "\\\\.*lst(input)?listing"; then
      echo "No listing found:"
      echo "See the documentation of the listings package linked in the"
      echo "assessment section of"
      echo "https://daniel.bosk.se/introtools/modules/latex/latex"
      echo
    fi
  fi

  rm -f $texfiles

  local allfiles=$(mktemp)

  find "$1" -type f > $allfiles
  if ! check_student $s $allfiles "history"; then
    echo "No command-line history found:"
    echo "See the requirements in the assessment section of"
    echo "https://daniel.bosk.se/introtools/modules/latex/latex"
    echo "and the assessment section of The Terminal assignment"
    echo "https://daniel.bosk.se/introtools/modules/terminal/terminal"
    echo
  fi

  rm -f $allfiles
}
@

The [[check_student]] function will grep(1) the files for the provided regex.
It will print and return false if the test failed.
<<generate grade and feedback>>=
check_student() {
  cat "$2" | xargs -d "\n" egrep "$3" > /dev/null
  if [ $? = 0 ]; then
    true
  else
    false
  fi
}
@


\section{Grading}

To grade, we iterate through the remaining students, given by 
[[students_to_actually_grade]].
We run [[canvaslms]] as a background job, since it's so slow.
However, we need a small delay to not run into Canvas' DoS protection.
<<grade students>>=
grade_students() {
  local assignm="$1"; shift

  for course in $*; do
    local canvas=$(echo $course | cut -f 1 -d :)
    local github=$(echo $course | cut -f 2 -d :)

    local students_w_times=$(students_with_grading_time "$canvas" "$assignm")

    local repos=$(clone_repos $github $(echo "$students_w_times" | cut -f 1))

    local students=$(echo "$students_w_times" | \
      students_to_actually_grade $repos)

    for s in $students; do
      local feedback=$(generate_feedback $repos/$s)

      if [[ $(echo -n "$feedback" | wc -c) -gt 0 ]]; then
        echo "$s (attempted latex)"

        canvaslms grade -c "${canvas}" -a "${assignm}" \
          -u $s@kth.se -g F -m "$feedback" &
      else
        echo "$s (latex)"

        canvaslms grade -c "${canvas}" -a "${assignm}" \
          -u $s@kth.se -g P &
      fi

      sleep 0.2
    done

    rm -Rf $repos
  done

  wait
}

grade_students "${ASSIGNMENT}" ${COURSE_CODE}
@

