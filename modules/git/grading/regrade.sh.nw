Now we should treat regrades for the LaTeX assignment.
We will check if the students with an F have updated their reports.
If they have, we will put them back into the [[students-to-grade.tsv]] file 
that the [[grade.sh]] script relies on.

We will use the [[canvas]] command to get the list of F:s.
This must be installed from
\begin{center}
  \texttt{https://github.com/dbosk/canvasy}.
\end{center}

We will use the [[repobee]] command to clone the repos containing the LaTeX 
reports.
This must be installed from
\begin{center}
  \texttt{https://repobee.org}.
\end{center}

We'll do this in the form of a shell script.
<<regrade.sh>>=
#!/bin/bash
# This file is generated from regrade.sh.nw
<<variables>>
<<functions>>

<<find F:ed assignments>>
<<clone repos>>
<<check dates on reports>>
<<ensure to-grade-file has no redundancy>>
@


\section{Find F:ed assignments}

We'll use the file [[students-to-regrade.tsv]] to keep track of which students 
must be regraded.
This file will keep the canvas ID, login ID and the time for the last grading.
If that file exists, we'll use it.
Otherwise we can create it using [[canvas submissions]].
<<find F:ed assignments>>=
if ! [ -e ${STUDENTS_TO_REGRADE} ]; then
  canvas users -c "${COURSE_CODE}" | cut -f 1,2 | sed "s/@kth.se//" | \
    sort -k 1 > users.tsv
  canvas submissions -c "${COURSE_CODE}" -a "${ASSIGNMENT}" | \
    grep F | cut -f 1,3 | sort -k 1 > users-w-fs.tsv
  join -t $'\t' users.tsv users-w-fs.tsv | \
    sort -k 1 -u > ${STUDENTS_TO_REGRADE}
  rm users.tsv users-w-fs.tsv
fi
@ We set the variables in the [[<<variables>>]] block.
<<variables>>=
COURSE_CODE=DD1301HT201
ASSIGNMENT="Git"
STUDENTS_TO_REGRADE=students-to-regrade.tsv
@


\section{Clone the repos}

The LaTeX reports that we should grade are found in repos on KTH GitHub, in the 
datintro20 organization:
\begin{center}
  \texttt{https://gits-15.sys.kth.se/dd1337-ht20-intro}.
\end{center}
We'll use [[repobee]] to clone those repos.
<<clone repos>>=
[ -d repos ] || \
  clone_repos
@
<<functions>>=
function clone_repos() {
  mkdir -p repos
  cut -f 2 ${STUDENTS_TO_REGRADE} | \
    sed "s/@kth.se//" > repos/${STUDENTS_TO_REGRADE}
  (cd repos; \
    repobee repos clone -qq \
      --sf ${STUDENTS_TO_REGRADE} -o ${GH_ORG} --discover-repos)
}
@
<<variables>>=
GH_ORG=datintro20
@


\section{Check dates on repos}

Now we must check the date of the last change to the repo and compare to when 
we graded it the last time.
If the repo is newer, we will add the student to the [[students-to-grade.tsv]] 
file.
<<check dates on reports>>=
for s in $(cat ${STUDENTS_TO_REGRADE} | sed "s/@kth.se//" | cut -f 2);
do
  time=$(grep $s ${STUDENTS_TO_REGRADE} | cut -f 3)
  for r in $(find repos/$s -mindepth 1 -maxdepth 1 -type d); do
    if [[ "$time" < "$(git -C $r log -1 --format=\%cI)" ]]; then
      grep $s ${STUDENTS_TO_REGRADE} | cut -f 1,2 >> ${STUDENTS_TO_GRADE}
      sed -i "/$s/d" ${STUDENTS_TO_REGRADE}
    fi
  done
done
@ We must set the [[STUDENTS_TO_GRADE]] variable.
<<variables>>=
STUDENTS_TO_GRADE=students-to-grade.tsv
@

Since we update the grading file, we must ensure it has the proper form: there 
must be no redundancy.
If there is redundancy, [[grep]] will return more than one value.
<<ensure to-grade-file has no redundancy>>=
mv ${STUDENTS_TO_GRADE} ${STUDENTS_TO_GRADE}.tmp
sort -u ${STUDENTS_TO_GRADE}.tmp > ${STUDENTS_TO_GRADE}
rm ${STUDENTS_TO_GRADE}.tmp
@
