We want to grade the \emph{Git} assignment.
The students should add a file and change an already existing file in their 
designated repo.

We will use the [[canvaslms]] command to report the grades. This must be installed 
from
\begin{center}
  \texttt{https://github.com/dbosk/canvaslms}.
\end{center}

We will do this as a shell script.
<<grade.sh>>=
#!/bin/bash
# This file is generated from grade.sh.nw
<<configuration variables>>
<<common functions>>
<<generate grade and feedback>>
<<grade students>>
@

\section{Settings}

We need a few variables as settings.
We must set the course code and the corresponding GitHub organization.
We set this in the [[COURSE_CODE_ORG]] variable.
This is a space-separated list.
Each item has the course code followed by a colon followed by the organization.
The course code is a regular expression.
For example:
\begin{center}
  [[COURSE_CODE_ORG="DD1301HT21:datintro21 DD1337HT21:dd1337-ht21-intro"]]
\end{center}
We expect the course code to be set by the environment.

We must set the [[ASSIGNMENT]] variable. This is a regular expression.
<<configuration variables>>=
ASSIGNMENT="^(Git|Using Git)$"
@


\section{Common functions}

We will use the following functions from the [[common.sh]] file as a building 
block:
\begin{itemize}
\item [[students_to_grade]]
\item [[students_with_grading_time]]
\item [[clone_repos]]
\item [[students_to_actually_grade]]
\end{itemize}
<<common functions>>=
source common.sh
@


\section{Feedback and checking their repo}

We provide a function [[generate_feedback]].
It takes the path to a repo.
Its output is the feedback for the student.
If the feedback is zero, the student passes.

The assignment is to modify the README file.
Then they should add another file.
<<generate grade and feedback>>=
generate_feedback() {
  local repo=$(echo "$1/$(ls $1)")

  echo "# datintro

This is your first repo, we made it for you. You can create repos on your own, 
*however, during the Git-related assignments, you must work in this repo, 
otherwise the grading scripts cannot find your work!*

Good luck!" | diff - $repo/README.md > /dev/null \
    && echo "No change to README.md detected."

  local allfiles=$(mktemp)

  find "$1" -type f | grep -v "/\.git/" > $allfiles

  if [[ $(cat $allfiles | wc -l) -lt 2 ]]; then
    echo "No new file detected."
  fi

  rm -f $allfiles
}
@


\section{Grading}

To grade, we iterate through the remaining students, given by 
[[students_to_actually_grade]].
We run [[canvaslms]] as a background job, since it's so slow.
However, we need a small delay to not run into Canvas' DoS protection.
<<grade students>>=
grade_students() {
  local assignm="$1"; shift

  for course in $*; do
    local canvas=$(echo $course | cut -f 1 -d :)
    local github=$(echo $course | cut -f 2 -d :)

    local students_w_times=$(students_with_grading_time "$canvas" "$assignm")
    if [[ -z "$students_w_times" ]]; then
      continue
    fi

    local repos=$(clone_repos $github $(echo "$students_w_times" | cut -f 1))

    local students=$(echo "$students_w_times" | \
      students_to_actually_grade $repos)

    for s in $students; do
      local feedback=$(generate_feedback $repos/$s)

      if [[ $(echo -n "$feedback" | wc -c) -gt 0 ]]; then
        echo "$s (attempted git)"

        canvaslms grade -c "${canvas}" -a "${assignm}" \
          -u $s@kth.se -g F -m "$feedback" &
      else
        echo "$s (git)"

        canvaslms grade -c "${canvas}" -a "${assignm}" \
          -u $s@kth.se -g P &
      fi

      sleep 0.2
    done

    rm -Rf $repos
  done

  wait
}

grade_students "${ASSIGNMENT}" ${COURSE_CODE_ORG}
@

